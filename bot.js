const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, Events, EmbedBuilder } = require('discord.js');
require('dotenv').config();
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
require('./keepalive.js');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

const TOKEN = process.env.TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const OWM_API_KEY = process.env.OWM_API_KEY;

const commands = [
    new SlashCommandBuilder()
        .setName('weather')
        .setDescription('Xem th·ªùi ti·∫øt hi·ªán t·∫°i b·∫±ng t√™n th√†nh ph·ªë')
        .addStringOption(opt =>
            opt.setName('location')
                .setDescription('T√™n th√†nh ph·ªë')
                .setRequired(true)
        ),
    new SlashCommandBuilder()
        .setName('weather_coord')
        .setDescription('Xem th·ªùi ti·∫øt hi·ªán t·∫°i theo t·ªça ƒë·ªô')
        .addNumberOption(opt =>
            opt.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)
        )
        .addNumberOption(opt =>
            opt.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)
        ),
    // forecast
    new SlashCommandBuilder()
        .setName('forecast')
        .setDescription('Xem d·ª± b√°o th·ªùi ti·∫øt')
        .addStringOption(opt =>
            opt.setName('location')
                .setDescription('T√™n th√†nh ph·ªë')
                .setRequired(true)
        )
        .addIntegerOption(opt =>
            opt.setName('hours')
                .setDescription('S·ªë gi·ªù mu·ªën xem d·ª± b√°o (m·∫∑c ƒë·ªãnh: 3 gi·ªù)')
                .addChoices(
                    { name: '3 gi·ªù', value: 3 },
                    { name: '5 gi·ªù', value: 5 },
                    { name: '12 gi·ªù', value: 12 },
                    { name: '24 gi·ªù', value: 24 }
                )
        ),

    // forecast_coord
    new SlashCommandBuilder()
        .setName('forecast_coord')
        .setDescription('Xem d·ª± b√°o th·ªùi ti·∫øt theo t·ªça ƒë·ªô')
        .addNumberOption(opt =>
            opt.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)
        )
        .addNumberOption(opt =>
            opt.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)
        )
        .addIntegerOption(opt =>
            opt.setName('hours')
                .setDescription('S·ªë gi·ªù mu·ªën xem d·ª± b√°o (m·∫∑c ƒë·ªãnh: 3 gi·ªù)')
                .addChoices(
                    { name: '3 gi·ªù', value: 3 },
                    { name: '6 gi·ªù', value: 6 },
                    { name: '12 gi·ªù', value: 12 },
                    { name: '24 gi·ªù', value: 24 }
                )
        ),
    new SlashCommandBuilder()
        .setName('help')
        .setDescription('Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p')
].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(TOKEN);
(async () => {
    await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });
    console.log("ƒê√£ ƒëƒÉng k√Ω slash command!");
})();

client.once('ready', () => {
    console.log(`Bot ƒë√£ ƒëƒÉng nh·∫≠p: ${client.user.tag}`);
});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isCommand()) return;
    const { commandName, options } = interaction;

    if (commandName === 'weather') {
        await interaction.deferReply();
        const location = options.getString('location').trim();
        const result = await fetchWeatherData(location);
        await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
    }

    if (commandName === 'weather_coord') {
        await interaction.deferReply();
        const lat = options.getNumber('latitude');
        const lon = options.getNumber('longitude');
        const result = await fetchWeatherDataByCoords(lat, lon);
        await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
    }

    if (commandName === 'forecast') {
        await interaction.deferReply();
        const location = options.getString('location').trim();
        let hours = options.getInteger('hours') ?? 3; // m·∫∑c ƒë·ªãnh 3 gi·ªù
        if (hours <= 0 || hours > 120) {
            return interaction.editReply('‚ö† Vui l√≤ng ch·ªçn s·ªë gi·ªù t·ª´ 1 ƒë·∫øn 120.');
        }
        const result = await fetchForecast(location, hours);
        await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
    }

    if (commandName === 'forecast_coord') {
        await interaction.deferReply();
        const lat = options.getNumber('latitude');
        const lon = options.getNumber('longitude');
        let hours = options.getInteger('hours') ?? 3; // m·∫∑c ƒë·ªãnh 3 gi·ªù
        if (hours <= 0 || hours > 120) {
            return interaction.editReply('‚ö† Vui l√≤ng ch·ªçn s·ªë gi·ªù t·ª´ 1 ƒë·∫øn 120.');
        }
        const result = await fetchForecastByCoords(lat, lon, hours);
        await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
    }
    // Th√™m tr·ª£ gi√∫p

    if (commandName === 'help') {
        await interaction.deferReply();
        await interaction.editReply({
            embeds: [
                new EmbedBuilder()
                    .setTitle('Tr·ª£ gi√∫p')
                    .setDescription('Danh s√°ch c√°c l·ªánh:')
                    .addFields(
                        { name: '/weather', value: 'Xem th·ªùi ti·∫øt hi·ªán t·∫°i', inline: true },
                        { name: '/weather_coord', value: 'Xem th·ªùi ti·∫øt hi·ªán t·∫°i theo t·ªça ƒë·ªô', inline: true },
                        { name: '/forecast', value: 'Xem d·ª± b√°o th·ªùi ti·∫øt', inline: true },
                        { name: '/forecast_coord', value: 'Xem d·ª± b√°o th·ªùi ti·∫øt theo t·ªça ƒë·ªô', inline: true },
                        { name: '/help', value: 'Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p', inline: true }
                    )
            ]
        });
    }

});

async function fetchWeatherData(location) {
    try {
        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${OWM_API_KEY}&units=metric&lang=vi`);
        const data = await res.json();
        if (data.cod !== 200) return { error: true, content: `‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho **${location}**` };
        return { error: false, embed: buildWeatherEmbed(data) };
    } catch {
        return { error: true, content: '‚ö† L·ªói khi k·∫øt n·ªëi OpenWeatherMap.' };
    }
}

async function fetchWeatherDataByCoords(lat, lon) {
    try {
        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${OWM_API_KEY}&units=metric&lang=vi`);
        const data = await res.json();
        if (data.cod !== 200) return { error: true, content: `‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho t·ªça ƒë·ªô (${lat}, ${lon})` };
        return { error: false, embed: buildWeatherEmbed(data) };
    } catch {
        return { error: true, content: '‚ö† L·ªói khi k·∫øt n·ªëi OpenWeatherMap.' };
    }
}

function buildWeatherEmbed(data) {
    const rain1h = (data.rain?.['1h']) || 0;
    const rain3h = (data.rain?.['3h']) || 0;
    const snow1h = (data.snow?.['1h']) || 0;
    const snow3h = (data.snow?.['3h']) || 0;
    const visibilityKm = (data.visibility || 0) / 1000;
    const weatherMain = data.weather[0].main.toLowerCase();
    let color = 0x3498db;
    if (weatherMain.includes('clear')) color = 0xf1c40f;
    else if (weatherMain.includes('cloud')) color = 0x95a5a6;
    else if (weatherMain.includes('rain') || weatherMain.includes('drizzle')) color = 0x2980b9;
    else if (weatherMain.includes('snow')) color = 0xffffff;
    else if (weatherMain.includes('thunder')) color = 0x8e44ad;

    return new EmbedBuilder()
        .setTitle(`üåç Th·ªùi ti·∫øt ·ªü ${data.name}, ${data.sys.country} (${data.coord.lat}, ${data.coord.lon})`)
        .setDescription(`${data.weather[0].description}`)
        .setColor(color)
        .addFields(
            { name: 'üå° Nhi·ªát ƒë·ªô', value: `${data.main.temp}¬∞C`, inline: true },
            { name: 'üíß ƒê·ªô ·∫©m', value: `${data.main.humidity}%`, inline: true },
            { name: 'üí® Gi√≥', value: `${data.wind.speed} m/s (${data.wind.deg}¬∞)`, inline: true },
            { name: 'üëÅ T·∫ßm nh√¨n', value: `${visibilityKm.toFixed(1)} km`, inline: true },
            { name: 'üåß M∆∞a', value: `${rain1h} mm (1h), ${rain3h} mm (3h)`, inline: true },
            { name: '‚ùÑ Tuy·∫øt', value: `${snow1h} mm (1h), ${snow3h} mm (3h)`, inline: true },
            { name: '‚òÅ M√¢y', value: `${data.clouds.all}%`, inline: true }
        )
        .setThumbnail(`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)
        .setFooter({ text: 'Ngu·ªìn: OpenWeatherMap\nDev by @random.person.255' })
        .setTimestamp();
}

async function fetchForecast(location, hours) {
    try {
        const res = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(location)}&appid=${OWM_API_KEY}&units=metric&lang=vi`);
        const data = await res.json();
        if (data.cod !== "200") return { error: true, content: `‚ùå Kh√¥ng t√¨m th·∫•y d·ª± b√°o cho **${location}**` };
        return { error: false, embed: buildForecastEmbed(data, hours, `${data.city.name}, ${data.city.country}`) };
    } catch {
        return { error: true, content: '‚ö† L·ªói khi k·∫øt n·ªëi OpenWeatherMap.' };
    }
}

async function fetchForecastByCoords(lat, lon, hours) {
    try {
        const res = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${OWM_API_KEY}&units=metric&lang=vi`);
        const data = await res.json();
        if (data.cod !== "200") return { error: true, content: `‚ùå Kh√¥ng t√¨m th·∫•y d·ª± b√°o cho t·ªça ƒë·ªô (${lat}, ${lon})` };
        return { error: false, embed: buildForecastEmbed(data, hours, `(${lat}, ${lon}) - ${data.city.name}, ${data.city.country}`) };
    } catch {
        return { error: true, content: '‚ö† L·ªói khi k·∫øt n·ªëi OpenWeatherMap.' };
    }
}

function buildForecastEmbed(data, hours, title) {
    const now = Date.now();
    const selected = data.list.filter(item => {
        const diffHours = (new Date(item.dt * 1000) - now) / (1000 * 60 * 60);
        return diffHours > 0 && diffHours <= hours;
    });
    if (selected.length === 0) {
        return new EmbedBuilder().setDescription(`‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o trong ${hours} gi·ªù t·ªõi.`);
    }

    const embed = new EmbedBuilder()
        .setTitle(`üìÖ D·ª± b√°o ${hours} gi·ªù t·ªõi ·ªü ${title}`)
        .setColor(0x3498db)
        .setThumbnail(`https://openweathermap.org/img/wn/${selected[0].weather[0].icon}@2x.png`)
        .setFooter({ text: 'Ngu·ªìn: OpenWeatherMap\nDev by @random.person.255' })
        .setTimestamp();

    let desc = '';
    selected.forEach(item => {
        const time = new Date(item.dt * 1000).toLocaleString('vi-VN', { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit' });
        desc += `**${time}** - ${item.weather[0].description}, üå° ${item.main.temp}¬∞C, üíß ${item.main.humidity}%, üëÅ ${(item.visibility / 1000).toFixed(1)} km, üí® ${item.wind.speed} m/s\n`;
    });

    embed.setDescription(desc);
    return embed;
}

client.login(TOKEN);
